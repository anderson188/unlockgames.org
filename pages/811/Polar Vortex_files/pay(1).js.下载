'use strict';
var prButton;
var paymentRequest;
var payType = false;
try{
  var script = document.createElement('script');
    script.src = "https://js.stripe.com/v3/";
    document.body.appendChild(script);
  
  setTimeout(()=>{
    var stripe = Stripe(stripeKey);
    paymentRequest = stripe.paymentRequest({
        country: "US",
        currency: "usd",
        total: {
          label: stripeLabel,
          amount: stripeAmount,
        },
        requestPayerName: true,
        requestPayerEmail: true,
        requestPayerPhone: true
    });
    //console.log('Stripe Loaded');

    var elements = stripe.elements();
    prButton = elements.create("paymentRequestButton", {
        paymentRequest: paymentRequest,
        style: {
          paymentRequestButton: {
            type: (enableCustomStyle && btnText) ? btnText : 'buy',
            // One of 'default', 'book', 'buy', or 'donate'
            // Defaults to 'default'
            theme: (enableCustomStyle && btnTheme) ? btnTheme : 'dark',
            // One of 'dark', 'light', or 'light-outline'
            // Defaults to 'dark'
            height: (enableCustomStyle && btnSize) ? btnSize : '60px'
            // Defaults to '40px'. The width is always '100%'.
          },
      },
    });
    // Check the availability of the Payment Request API first.
    paymentRequest.canMakePayment().then(function(result) {
        if (result) {

          // detect pay type
          if(result.applePay){
            payType = 'applePay';
          }
          else if(result.googlePay){
            payType = 'googlePay';
          }

          if(!isDafaultbtn){
            if(result.applePay || result.googlePay){
              prButton.mount("#payment-request-button");
            }
            else{
              if($('#payment-gpay-button').length){
                document.getElementById('payment-gpay-button').innerHTML = customBtnHtml;
                document.getElementById('payment-gpay-button').style.display="block"; 
              }
            }
          }
          else{
            prButton.mount("#payment-request-button");
          }
            
        } else {
            document.getElementById("payment-request-button").style.display = "none";
            document.getElementById('payment-gpay-button').style.display="none"; 
        }
    });
    if(!enableDirectMode)
    {
      //console.log("Token called");
      paymentRequest.on("token", function(ev) {
          ev.complete("success");
          prepareDataAndSubmit(ev.token, ev.payerPhone, ev);
      });
    }
    else{
      //console.log("Direct payment called");
      paymentRequest.on('paymentmethod', function(ev) {
       //console.log(ev);
        let taxCalculate = allowTax;
        if(taxCalculate)
        {
          getTaxrate(ev.paymentMethod.billing_details.address.postal_code, stripe, ev);
          
        }
        else{
          confirmPayment(stripe,ev);
        }
    });
    }
    
  },2000);
    
}
catch(e){
    //console.log(e);
}

function showGpay(){
  paymentRequest.show();
}

function confirmPayment(stripe,ev){
  // Confirm the PaymentIntent without handling potential next actions (yet).
          stripe.confirmCardPayment(
            clientSecret,
            {payment_method: ev.paymentMethod.id},
            {handleActions: false}
          ).then(function(confirmResult) {
            if (confirmResult.error) {
              // Report to the browser that the payment failed, prompting it to
              // re-show the payment interface, or show an error message and close
              // the payment interface.
              ev.complete('fail');
            } else {
              // Report to the browser that the confirmation was successful, prompting
              // it to close the browser payment method collection interface.
              ev.complete('success');
              // Let Stripe.js handle the rest of the payment flow.
              //console.log(confirmResult)
              prepareDataAndSubmitForDirectPayment(confirmResult, ev);
            }
          });
}
function updatePaymentIntent(amount, stripe, ev)
{
  $.ajax({
          url: AJAX_PATH + 'extensions/stripe/update-payment-intent',
          type: 'POST',
          data: {
            amount: amount,
            paymentIntentId: paymentIntentEncoded['id']
          },
          success: function(data) {
              confirmPayment(stripe,ev);
              //console.log('After update::',data);
              
          },
          error: function(error) {
              //console.log('After update error::',error);
          }
      });
}
function getTaxrate(zip, stripe, ev)
{
  $.ajax({
          url: taxEndpoint,
          type: 'POST',
          data: {
            zip:zip
          },
          success: function(data) {
              $('#loading-indicator').hide();
              data = JSON.parse(data);
              //console.log(data);
              if(data.success)
              {   let mainAmt = parseFloat(stripeAmount/100);
                  let taxAmt = (mainAmt * data.tax_rate).toFixed(2);
                  let amt = (parseFloat(mainAmt) + parseFloat(taxAmt));
                  //console.log(stripeAmount,mainAmt, taxAmt, amt)
                  updatePaymentIntent(amt, stripe, ev);
              }
              else{
                  
              }
          },
          error: function(error) {
              //console.log(error);
              $('#loading-indicator').hide();
          }
     });
}
function prepareDataAndSubmit(d, phone, data){

    var name = d.card.name.split(' ');
    var postData = {
        email: (data.payerEmail ? data.payerEmail : (d.email ? d.email : '')),
        firstName: name[0],
        lastName: name[1] ? name[1]: name[0],
        shippingAddress1: d.card.address_line1, 
        shippingAddress2: d.card.address_line2, 
        shippingCountry: d.card.address_country, 
        shippingState: d.card.address_state, 
        shippingCity: d.card.address_city, 
        shippingZip: d.card.address_zip, 
        phone: phone ? phone : Math.floor(Math.random() * 9999999999),
        ipAddress:d.client_ip,
        campaignId: stripeCampaignId,
        billingSameAsShipping : 'yes',
        stripe_token: d.id,
        cardType:'stripe',
        payType: payType
    };
    if(prospectId)
    {
        postData['prospectId'] = prospectId;
    }
    
    var formArr = ['checkout_form', 'is-upsell', 'downsell_form1'];
    var formName1 = (typeof(document.forms[1]) != 'undefined') ? document.forms[1].name : '';
    var formselector = document.forms[0];
    if(document.forms && document.forms.length > 1 && (formArr.indexOf(formName1) != -1))
    {
      formselector = document.forms[1];
    }
    var action = 'checkout';
    if(formselector.name.indexOf('downsell') > -1)
    {
        action = 'downsell';
    }
    if(formselector.name.indexOf('upsell') > -1)
    {
        action = 'upsell';
    }
  
    $('#loading-indicator').show();
    
    $.ajax({
          url: app_config.offer_path + AJAX_PATH + action,
          type: 'POST',
          data: $(formselector).serialize() + '&' + $.param(postData),
          success: function(data) {
              $('#loading-indicator').hide();
              //console.log(data);
              if(data.success)
              {
                  window.location.href = data.redirect;
              }
              else{
                  var errorMsg = [];
                  if(data.errors)
                  {
                      errorMsg = data.errors;
                  }
                  else{
                      errorMsg = ['Order has been declined.']
                  }
                  cb.errorHandler(errorMsg);
              }
          },
          error: function(error) {
              //console.log(error);
              $('#loading-indicator').hide();
          }
     });
}
function prepareDataAndSubmitForDirectPayment(confirmResult, personInfo){
    var name = personInfo.paymentMethod.billing_details.name.split(' ');
    var postData = {
        email: personInfo.paymentMethod.billing_details.email,
        firstName: name[0],
        lastName: name[1] ? name[1]: name[0],
        shippingAddress1: personInfo.paymentMethod.billing_details.address.line1, 
        shippingAddress2: personInfo.paymentMethod.billing_details.address.line2, 
        shippingCountry: personInfo.paymentMethod.billing_details.address.country, 
        shippingState: personInfo.paymentMethod.billing_details.address.state, 
        shippingCity: personInfo.paymentMethod.billing_details.address.city, 
        shippingZip: personInfo.paymentMethod.billing_details.address.postal_code, 
        phone: personInfo.payerPhone ? personInfo.payerPhone : Math.floor(Math.random() * 9999999999),
        //ipAddress:d.client_ip,
        campaignId: stripeCampaignId,
        billingSameAsShipping : 'yes',
        stripe_id: confirmResult.paymentIntent.id,
        stripe_payment_method: confirmResult.paymentIntent.payment_method,
        cardType:'stripe',
        //paymentMethodName: iOS() ? 'APPLEPAY' : 'GOOGLEPAY'
        paymentMethodName: detectPay(confirmResult)
    };
    if(prospectId)
    {
        postData['prospectId'] = prospectId;
    }
    var formArr = ['checkout_form', 'is-upsell', 'downsell_form1'];
    var formName1 = document.forms[1].name;
    var formselector = document.forms[0];
    if(document.forms && document.forms.length > 1 && (formArr.indexOf(formName1) != -1))
    {
      formselector = document.forms[1];
    }
    var action = 'checkout';
    if(formselector.name.indexOf('downsell') > -1)
    {
        action = 'downsell';
    }
    if(formselector.name.indexOf('upsell') > -1)
    {
        action = 'upsell';
    }
  
    $('#loading-indicator').show();
    
    $.ajax({
          url: app_config.offer_path + AJAX_PATH + action,
          type: 'POST',
          data: $(formselector).serialize() + '&' + $.param(postData),
          success: function(data) {
              $('#loading-indicator').hide();
              //console.log(data);
              if(data.success)
              {
                  window.location.href = data.redirect;
              }
              else{
                  var errorMsg = [];
                  if(data.errors)
                  {
                      errorMsg = data.errors;
                  }
                  else{
                      errorMsg = ['Order has been declined.']
                  }
                  cb.errorHandler(errorMsg);
              }
          },
          error: function(error) {
              //console.log(error);
              $('#loading-indicator').hide();
          }
     });
}

function iOS() {
  return [
    'iPad Simulator',
    'iPhone Simulator',
    'iPod Simulator',
    'iPad',
    'iPhone',
    'iPod'
  ].includes(navigator.platform)
  // iPad on iOS 13 detection
  || (navigator.userAgent.includes("Mac") && "ontouchend" in document)
}

function detectPay(confirmResult){
  if(confirmResult.paymentIntent.payment_method.card && confirmResult.paymentIntent.payment_method.card.wallet.apple_pay)
  {
    return 'APPLEPAY';
  }
  else if(confirmResult.paymentIntent.payment_method.card && confirmResult.paymentIntent.payment_method.card.wallet.google_pay)
  {
    return 'GOOGLEPAY';
  }
  else{
    return 'PREPAID';
  }
}